import xmltodict
import six

from openml._api_calls import _perform_api_call
from . import OpenMLFlow, flow_to_sklearn


def get_flow(flow_id):
    """Download the OpenML flow for a given flow ID.

    Parameters
    ----------
    flow_id : int
        The OpenML flow id.
    """
    # TODO add caching here!
    try:
        flow_id = int(flow_id)
    except:
        raise ValueError("Flow ID must be an int, got %s." % str(flow_id))

    flow_xml = _perform_api_call("flow/%d" % flow_id)

    flow_dict = xmltodict.parse(flow_xml)
    flow = OpenMLFlow._from_dict(flow_dict)

    if 'sklearn' in flow.external_version:
        flow.model = flow_to_sklearn(flow)

    return flow


def list_flows(offset=None, size=None, tag=None):
    """Return a list of all flows which are on OpenML.

    Parameters
    ----------
    offset : int, optional
        the number of flows to skip, starting from the first
    size : int, optional
        the maximum number of flows to return
    tag : str, optional
        the tag to include

    Returns
    -------
    flows : dict
        A mapping from flow_id to a dict giving a brief overview of the
        respective flow.

        Every flow is represented by a dictionary containing
        the following information:
        - flow id
        - full name
        - name
        - version
        - external version
        - uploader
    """
    api_call = "flow/list"
    if offset is not None:
        api_call += "/offset/%d" % int(offset)

    if size is not None:
        api_call += "/limit/%d" % int(size)

    if tag is not None:
        api_call += "/tag/%s" % tag

    return _list_flows(api_call)


def flow_exists(name, external_version):
    """Retrieves the flow id of the flow uniquely identified by name + external_version.

    Parameter
    ---------
    name : string
        Name of the flow
    version : string
        Version information associated with flow.

    Returns
    -------
    flow_exist : int
        flow id iff exists, False otherwise

    Notes
    -----
    see http://www.openml.org/api_docs/#!/flow/get_flow_exists_name_version
    """
    if not (isinstance(name, six.string_types) and len(name) > 0):
        raise ValueError('Argument \'name\' should be a non-empty string')
    if not (isinstance(name, six.string_types) and len(external_version) > 0):
        raise ValueError('Argument \'version\' should be a non-empty string')

    xml_response = _perform_api_call("flow/exists",
                                     data={'name': name, 'external_version': external_version})

    result_dict = xmltodict.parse(xml_response)
    flow_id = int(result_dict['oml:flow_exists']['oml:id'])
    if flow_id > 0:
        return flow_id
    else:
        return False


def _list_flows(api_call):
    # TODO add proper error handling here!
    xml_string = _perform_api_call(api_call)
    flows_dict = xmltodict.parse(xml_string)

    # Minimalistic check if the XML is useful
    assert type(flows_dict['oml:flows']['oml:flow']) == list, \
        type(flows_dict['oml:flows'])
    assert flows_dict['oml:flows']['@xmlns:oml'] == \
           'http://openml.org/openml', flows_dict['oml:flows']['@xmlns:oml']

    flows = dict()
    for flow_ in flows_dict['oml:flows']['oml:flow']:
        fid = int(flow_['oml:id'])
        flow = {'id': fid,
                'full_name': flow_['oml:full_name'],
                'name': flow_['oml:name'],
                'version': flow_['oml:version'],
                'external_version': flow_['oml:external_version'],
                'uploader': flow_['oml:uploader']}
        flows[fid] = flow

    return flows


def are_flows_equal(flow1, flow2):
    """Check equality of two flows.

    Two flows are equal if their all keys which are not set by the server
    are equal, as well as all their parameters and components.
    """
    if not isinstance(flow2, flow1.__class__):
        return False

    # Name is actually not generated by the server, but it will be
    # tested further down with a getter (allows mocking in the tests)
    generated_by_the_server = ['flow_id', 'uploader', 'version',
                               'upload_date', ]
    ignored_by_python_API = ['binary_url', 'binary_format', 'binary_md5',
                             'model']

    for key in set(flow1.__dict__.keys()).union(flow2.__dict__.keys()):
        if key in generated_by_the_server + ignored_by_python_API:
            continue
        attr1 = getattr(flow1, key, None)
        attr2 = getattr(flow2, key, None)
        if key == 'components':
            for name in set(attr1.keys()).union(attr2.keys()):
                if not (name in attr1 and name in attr2):
                    return False
                if not are_flows_equal(attr1[name], attr2[name]):
                    return False
        else:
            if attr1 != attr2:
                return False
    return True
import os
from collections import OrderedDict
import xmltodict


class OpenMLFlow(object):
    def __init__(self):
        pass

    @staticmethod
    def generate_flow_xml(classifier):
        import sklearn
        flow_dict = OrderedDict()
        flow_dict['oml:flow'] = OrderedDict()
        flow_dict['oml:flow']['@xmlns:oml'] = 'http://openml.org/openml'
        flow_dict['oml:flow']['oml:name'] = classifier.__module__ + \
            "." + classifier.__class__.__name__
        flow_dict['oml:flow'][
            'oml:external_version'] = 'Tsklearn_' + sklearn.__version__
        flow_dict['oml:flow']['oml:description'] = 'Flow generated by openml_run'

        clf_params = classifier.get_params()
        flow_parameters = []
        for k, v in clf_params.items():
            # data_type, default_value, description, recommendedRange
            # type = v.__class__.__name__    Not using this because it doesn't conform standards
            # eg. int instead of integer
            param_dict = {'oml:name': k}
            flow_parameters.append(param_dict)

        flow_dict['oml:flow']['oml:parameter'] = flow_parameters

        flow_xml = xmltodict.unparse(flow_dict, pretty=True)

        # A flow may not be uploaded with the encoding specification..
        flow_xml = flow_xml.split('\n', 1)[-1]
        return flow_xml

    @staticmethod
    def ensure_flow_exists(connector, classifier):
        """
        First checks if a flow exists for the given classifier.
        If it does, then it will return the corresponding flow id.
        If it does not, then it will create a flow, and return the flow id
        of the newly created flow.
        """
        import sklearn
        flow_name = classifier.__module__ + "." + classifier.__class__.__name__
        flow_version = 'Tsklearn_' + sklearn.__version__
        _, _, flow_id = connector.check_flow_exists(flow_name, flow_version)

        if int(flow_id) == -1:
            # flow does not exist yet, create it
            flow_xml = OpenMLFlow.generate_flow_xml(classifier)
            file_name = classifier.__class__.__name__ + '_flow.xml'
            abs_file_path = os.path.abspath(file_name)
            with open(abs_file_path, 'w') as fh:
                fh.write(flow_xml)

            flow_xml_binary = open(abs_file_path, 'rb').read()
            return_code, response_xml = connector.upload_flow(flow_xml_binary,
                                                              "FIXME DEFINE PYTHON FLOW")

            response_dict = xmltodict.parse(response_xml)
            flow_id = response_dict['oml:upload_flow']['oml:id']
            return int(flow_id)

        return int(flow_id)
